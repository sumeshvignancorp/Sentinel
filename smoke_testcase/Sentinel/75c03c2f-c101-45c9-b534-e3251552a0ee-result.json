{"name": "test_route_report", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"MuiTypography-root MuiTypography-button MuiTypography-noWrap css-1vdoluy\">...</span> is not clickable at point (908, 127). Other element would receive the click: <span aria-label=\"Show\" class=\"\">...</span>\n  (Session info: chrome=132.0.6834.111)\nStacktrace:\n\tGetHandleVerifier [0x00007FF719D3FB05+28789]\n\t(No symbol) [0x00007FF719CA86E0]\n\t(No symbol) [0x00007FF719B4592A]\n\t(No symbol) [0x00007FF719BA0FDE]\n\t(No symbol) [0x00007FF719B9EA7C]\n\t(No symbol) [0x00007FF719B9BC46]\n\t(No symbol) [0x00007FF719B9ABA1]\n\t(No symbol) [0x00007FF719B8CD60]\n\t(No symbol) [0x00007FF719BBF43A]\n\t(No symbol) [0x00007FF719B8C5B6]\n\t(No symbol) [0x00007FF719BBF650]\n\t(No symbol) [0x00007FF719BDF654]\n\t(No symbol) [0x00007FF719BBF1E3]\n\t(No symbol) [0x00007FF719B8A938]\n\t(No symbol) [0x00007FF719B8BAA1]\n\tGetHandleVerifier [0x00007FF71A07933D+3410093]\n\tGetHandleVerifier [0x00007FF71A08E7DD+3497293]\n\tGetHandleVerifier [0x00007FF71A082A73+3448803]\n\tGetHandleVerifier [0x00007FF719E07BBB+848171]\n\t(No symbol) [0x00007FF719CB3C3F]\n\t(No symbol) [0x00007FF719CAF6E4]\n\t(No symbol) [0x00007FF719CAF87D]\n\t(No symbol) [0x00007FF719C9ED49]\n\tBaseThreadInitThunk [0x00007FFD1D66E8D7+23]\n\tRtlUserThreadStart [0x00007FFD1E4BBF2C+44]", "trace": "def test_route_report():\n        chrome_options = Options()\n        chrome_options.debugger_address = \"localhost:9222\"\n    \n        chrome_driver_path = \"D:\\\\pytest\\\\chromedriver.exe\"\n        service = Service(chrome_driver_path)\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n        driver.get(\"https://sentinel-live.co.uk\")\n        time.sleep(10)\n    \n        driver.find_element(\"xpath\", \"(//div[@role='button'])[3]\").click()  # reports\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"//button[text()='Route']\").click()  # route\n        time.sleep(5)\n        driver.find_element(\"xpath\", \"(//div[@role='combobox'])[1]\").click()\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"//li[text()='This Week']\").click()\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").click()\n        time.sleep(3)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(\"script\")\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(Keys.ARROW_DOWN)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(Keys.ENTER)\n        time.sleep(3)\n>       driver.find_element(By.XPATH, \"//span[text()='Show']\").click()\n\n3Reports\\test_1route.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000128F7BE2DB0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF719C9ED49]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD1D66E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFD1E4BBF2C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"MuiTypography-root MuiTypography-button MuiTypography-noWrap css-1vdoluy\">...</span> is not clickable at point (908, 127). Other element would receive the click: <span aria-label=\"Show\" class=\"\">...</span>\nE         (Session info: chrome=132.0.6834.111)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF719D3FB05+28789]\nE       \t(No symbol) [0x00007FF719CA86E0]\nE       \t(No symbol) [0x00007FF719B4592A]\nE       \t(No symbol) [0x00007FF719BA0FDE]\nE       \t(No symbol) [0x00007FF719B9EA7C]\nE       \t(No symbol) [0x00007FF719B9BC46]\nE       \t(No symbol) [0x00007FF719B9ABA1]\nE       \t(No symbol) [0x00007FF719B8CD60]\nE       \t(No symbol) [0x00007FF719BBF43A]\nE       \t(No symbol) [0x00007FF719B8C5B6]\nE       \t(No symbol) [0x00007FF719BBF650]\nE       \t(No symbol) [0x00007FF719BDF654]\nE       \t(No symbol) [0x00007FF719BBF1E3]\nE       \t(No symbol) [0x00007FF719B8A938]\nE       \t(No symbol) [0x00007FF719B8BAA1]\nE       \tGetHandleVerifier [0x00007FF71A07933D+3410093]\nE       \tGetHandleVerifier [0x00007FF71A08E7DD+3497293]\nE       \tGetHandleVerifier [0x00007FF71A082A73+3448803]\nE       \tGetHandleVerifier [0x00007FF719E07BBB+848171]\nE       \t(No symbol) [0x00007FF719CB3C3F]\nE       \t(No symbol) [0x00007FF719CAF6E4]\nE       \t(No symbol) [0x00007FF719CAF87D]\nE       \t(No symbol) [0x00007FF719C9ED49]\nE       \tBaseThreadInitThunk [0x00007FFD1D66E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFD1E4BBF2C+44]\n\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "start": 1738235891014, "stop": 1738235921606, "uuid": "687107b5-07cc-4667-967f-ef4f7b605e51", "historyId": "be13d8193d766dfbbf4beabb47eee9ec", "testCaseId": "be13d8193d766dfbbf4beabb47eee9ec", "fullName": "3Reports.test_1route#test_route_report", "labels": [{"name": "parentSuite", "value": "3Reports"}, {"name": "suite", "value": "test_1route"}, {"name": "host", "value": "Sumesh"}, {"name": "thread", "value": "15828-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "3Reports.test_1route"}]}